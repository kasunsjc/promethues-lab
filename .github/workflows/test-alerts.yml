name: üö® Alert System Test

on:
  schedule:
    # Test alerting system daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      test_duration:
        description: 'Test duration in minutes'
        required: false
        default: '5'
        type: string

jobs:
  test-alerting:
    name: üö® Test Complete Alerting Pipeline
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: üì• Checkout
      uses: actions/checkout@v4
      
    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: üì¶ Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl netcat-openbsd
        
    - name: üöÄ Start monitoring stack
      run: |
        echo "üöÄ Starting monitoring stack..."
        docker compose up -d
        
        echo "‚è≥ Waiting for services to initialize..."
        sleep 90
        
    - name: üîç Verify stack is healthy
      run: |
        echo "üîç Checking service health..."
        
        # Check Prometheus
        for i in {1..10}; do
          if curl -sf http://localhost:9090/-/ready; then
            echo "‚úÖ Prometheus is ready"
            break
          fi
          echo "‚è≥ Waiting for Prometheus... ($i/10)"
          sleep 10
        done
        
        # Check Alertmanager
        for i in {1..10}; do
          if curl -sf http://localhost:9093/-/ready; then
            echo "‚úÖ Alertmanager is ready"
            break
          fi
          echo "‚è≥ Waiting for Alertmanager... ($i/10)"
          sleep 10
        done
        
    - name: üîó Start webhook receiver
      run: |
        echo "üîó Starting webhook receiver..."
        python3 scripts/webhook_receiver.py > webhook_output.log 2>&1 &
        echo $! > webhook_pid.txt
        
        # Wait for webhook to start
        sleep 5
        
        # Test webhook is responding
        if nc -z localhost 5001; then
          echo "‚úÖ Webhook receiver is listening on port 5001"
        else
          echo "‚ùå Webhook receiver failed to start"
          exit 1
        fi
        
    - name: üö® Test MySQL Down Alert
      run: |
        echo "üö® Testing MySQL Down alert..."

        # Stop MySQL service
        echo "üõë Stopping MySQL service..."
        docker compose stop mysql
        
        # Verify MySQL is actually stopped
        echo "üîç Verifying MySQL is stopped..."
        mysql_status=$(docker compose ps mysql --format json | jq -r '.[0].State // "unknown"' 2>/dev/null || echo "stopped")
        echo "üìã MySQL container status: $mysql_status"
        
        # Test MySQL connection to confirm it's down
        if nc -z localhost 3306; then
          echo "‚ö†Ô∏è MySQL port 3306 is still accessible - service might not be fully stopped"
        else
          echo "‚úÖ MySQL port 3306 is not accessible - service is down"
        fi

        # Wait for alert to trigger (1 minute + buffer)
        echo "‚è≥ Waiting 90 seconds for MySQLDown alert..."
        sleep 90
        
        # Check if alert rules are loaded
        echo "üîç Checking if alert rules are loaded in Prometheus..."
        rules_response=$(curl -s http://localhost:9090/api/v1/rules)
        echo "üìã Alert rules response:"
        echo "$rules_response" | jq '.'
        
        # Check for MySQLDown rule specifically
        mysql_rule=$(echo "$rules_response" | jq '.data.groups[]?.rules[]? | select(.name == "MySQLDown")')
        if [[ -n "$mysql_rule" && "$mysql_rule" != "null" ]]; then
          echo "‚úÖ MySQLDown alert rule is loaded"
          echo "üìã Rule details:"
          echo "$mysql_rule" | jq '.'
        else
          echo "‚ùå MySQLDown alert rule not found in Prometheus"
          echo "üìã Available alert rules:"
          echo "$rules_response" | jq -r '.data.groups[]?.rules[]? | select(.type == "alerting") | "- \(.name)"' | head -10
        fi

        # Check if alert is firing in Prometheus
        echo "üîç Checking Prometheus alerts API..."
        prom_alerts=$(curl -s http://localhost:9090/api/v1/alerts)
        
        # Debug: Check if we got a valid response
        if [[ -z "$prom_alerts" ]]; then
          echo "‚ùå Empty response from Prometheus API"
          exit 1
        fi
        
        echo "üìã Raw Prometheus API response:"
        echo "$prom_alerts"
        
        # Check if response has proper JSON structure
        if ! echo "$prom_alerts" | jq empty 2>/dev/null; then
          echo "‚ùå Invalid JSON response from Prometheus"
          exit 1
        fi
        
        # Check if response has data field
        data_exists=$(echo "$prom_alerts" | jq 'has("data")')
        if [[ "$data_exists" != "true" ]]; then
          echo "‚ùå Prometheus API response missing 'data' field"
          echo "Response structure: $(echo "$prom_alerts" | jq 'keys')"
          exit 1
        fi
        
        # Check if we have any data
        data_length=$(echo "$prom_alerts" | jq '.data | length')
        if [[ "$data_length" -eq 0 ]]; then
          echo "‚ö†Ô∏è No alerts found in Prometheus (data array is empty)"
          echo "‚ùå MySQLDown alert not firing in Prometheus"
          exit 1
        fi
        
        echo "‚úÖ Found $data_length alerts in Prometheus"
        
        # Safely check for MySQL alert
        mysql_alert=$(echo "$prom_alerts" | jq '.data[] | select(.labels.alertname == "MySQLDown" and .state == "firing")' 2>/dev/null || echo "null")
        if [[ -n "$mysql_alert" && "$mysql_alert" != "null" && "$mysql_alert" != "" ]]; then
          echo "‚úÖ MySQLDown alert is firing in Prometheus"
          echo "üìã Alert details:"
          echo "$mysql_alert" | jq '.'
        else
          echo "‚ùå MySQLDown alert not firing in Prometheus"
          echo "üìã All alerts in Prometheus:"
          echo "$prom_alerts" | jq -r '.data[] | "- \(.labels.alertname // "unknown") (\(.state // "unknown"))"' | head -10
          exit 1
        fi

        # Check if alert reached Alertmanager (wait a bit more for propagation)
        echo "‚è≥ Waiting 30 seconds for alert to reach Alertmanager..."
        sleep 30
        
        echo "üîç Checking Alertmanager alerts API..."
        am_alerts=$(curl -s http://localhost:9093/api/v2/alerts)
        
        # Debug: Check if we got a valid response
        if [[ -z "$am_alerts" ]]; then
          echo "‚ùå Empty response from Alertmanager API"
          exit 1
        fi
        
        echo "üìã Raw Alertmanager API response:"
        echo "$am_alerts"
        
        # Check if response has proper JSON structure
        if ! echo "$am_alerts" | jq empty 2>/dev/null; then
          echo "‚ùå Invalid JSON response from Alertmanager"
          exit 1
        fi
        
        # Check if we have any alerts (v2 API returns array directly)
        alerts_length=$(echo "$am_alerts" | jq 'length')
        if [[ "$alerts_length" -eq 0 ]]; then
          echo "‚ö†Ô∏è No alerts found in Alertmanager (array is empty)"
          echo "‚ùå MySQLDown alert not in Alertmanager"
          exit 1
        fi
        
        echo "‚úÖ Found $alerts_length alerts in Alertmanager"
        
        # Safely check for MySQL alert
        am_mysql_alert=$(echo "$am_alerts" | jq '.[] | select(.labels.alertname == "MySQLDown")' 2>/dev/null || echo "null")
        if [[ -n "$am_mysql_alert" && "$am_mysql_alert" != "null" && "$am_mysql_alert" != "" ]]; then
          echo "‚úÖ MySQLDown alert reached Alertmanager"
          echo "üìã Alert details:"
          echo "$am_mysql_alert" | jq '.'
        else
          echo "‚ùå MySQLDown alert not in Alertmanager"
          echo "üìã All alerts in Alertmanager:"
          echo "$am_alerts" | jq -r '.[] | "- \(.labels.alertname // "unknown") (\(.status.state // "unknown"))"' | head -10
          exit 1
        fi

        # Check webhook received the alert
        if grep -q "MySQLDown" webhook_output.log; then
          echo "‚úÖ Webhook received MySQLDown alert"
          echo "üìã Webhook log excerpt:"
          grep -A 5 -B 5 "MySQLDown" webhook_output.log | tail -20
        else
          echo "‚ùå Webhook did not receive MySQLDown alert"
          echo "üìã Full webhook log:"
          cat webhook_output.log
          exit 1
        fi

    - name: üîÑ Test Alert Resolution
      run: |
        echo "üîÑ Testing alert resolution..."
        
        # Restart MySQL
        echo "üîÑ Restarting MySQL service..."
        docker compose start mysql
        
        # Wait for service to be healthy
        echo "‚è≥ Waiting for MySQL to be healthy..."
        sleep 60
        
        # Wait for alert to resolve
        echo "‚è≥ Waiting for alert to resolve..."
        sleep 60
        
        # Check if alert resolved in Prometheus
        mysql_alert=$(curl -s http://localhost:9090/api/v1/alerts)
        firing_mysql_alerts=$(echo "$mysql_alert" | jq '[.data[]? | select(.labels.alertname == "MySQLDown" and .state == "firing")]')
        firing_count=$(echo "$firing_mysql_alerts" | jq 'length')
        
        if [[ "$firing_count" -eq 0 ]]; then
          echo "‚úÖ MySQLDown alert resolved in Prometheus"
        else
          echo "‚ö†Ô∏è MySQLDown alert still firing in Prometheus"
          echo "$firing_mysql_alerts" | jq '.'
        fi
        
        # Check webhook received resolution
        if grep -q "resolved" webhook_output.log; then
          echo "‚úÖ Webhook received alert resolution"
        else
          echo "‚ö†Ô∏è Webhook did not receive resolution notification"
        fi
        
    - name: üö® Test Instance Down Alert
      run: |
        echo "üö® Testing InstanceDown alert..."
        
        # Stop node-exporter to trigger InstanceDown
        echo "üõë Stopping node-exporter..."
        docker compose stop node-exporter
        
        # Wait for alert
        echo "‚è≥ Waiting 90 seconds for InstanceDown alert..."
        sleep 90
        
        # Check alert in Prometheus
        prom_alerts=$(curl -s http://localhost:9090/api/v1/alerts)
        instance_alerts=$(echo "$prom_alerts" | jq '[.data[]? | select(.labels.alertname == "InstanceDown" and .state == "firing")]')
        instance_count=$(echo "$instance_alerts" | jq 'length')
        
        if [[ "$instance_count" -gt 0 ]]; then
          echo "‚úÖ InstanceDown alert is firing ($instance_count alerts)"
          echo "üìã Alert details:"
          echo "$instance_alerts" | jq -r '.[]? | "- Instance: \(.labels.instance // "unknown"), Job: \(.labels.job // "unknown")"'
        else
          echo "‚ùå InstanceDown alert not firing"
          echo "üìã All alerts in Prometheus:"
          echo "$prom_alerts" | jq -r '.data[]? | "- \(.labels.alertname // "unknown") (\(.state // "unknown"))"' | head -5
          exit 1
        fi
        
        # Restart node-exporter
        echo "üîÑ Restarting node-exporter..."
        docker compose start node-exporter
        
    - name: üìä Generate Summary Report
      if: always()
      run: |
        echo "üìä Generating alert test summary..."
        
        echo "## üö® Alert System Test Results" > alert_test_results.md
        echo "" >> alert_test_results.md
        
        echo "### üìà Prometheus Alerts Status" >> alert_test_results.md
        prom_alerts=$(curl -s http://localhost:9090/api/v1/alerts)
        echo "$prom_alerts" | jq -r '.data[]? | "- **\(.labels.alertname // "Unknown")**: \(.state // "unknown") (Instance: \(.labels.instance // "N/A"))"' >> alert_test_results.md
        
        echo "" >> alert_test_results.md
        echo "### üö® Alertmanager Alerts" >> alert_test_results.md
        am_alerts=$(curl -s http://localhost:9093/api/v2/alerts)
        echo "$am_alerts" | jq -r '.[]? | "- **\(.labels.alertname // "Unknown")**: \(.status.state // "unknown")"' >> alert_test_results.md
        
        echo "" >> alert_test_results.md
        echo "### üîó Webhook Activity" >> alert_test_results.md
        echo '```' >> alert_test_results.md
        tail -50 webhook_output.log >> alert_test_results.md
        echo '```' >> alert_test_results.md
        
        cat alert_test_results.md
        
    - name: üßπ Cleanup
      if: always()
      run: |
        echo "üßπ Cleaning up..."
        
        # Stop webhook receiver
        if [[ -f webhook_pid.txt ]]; then
          kill $(cat webhook_pid.txt) || true
        fi
        
        # Stop all services
        docker compose down -v
        
        echo "‚úÖ Cleanup completed"
        
    - name: üì§ Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: alert-test-results
        path: |
          alert_test_results.md
          webhook_output.log
        retention-days: 7
